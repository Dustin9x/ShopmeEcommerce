package com.shopme.admin.user;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.admin.FileUploadUtil;
import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@Controller
public class UserController {

	@Autowired
	private UserService service;
	
	@GetMapping("/users")
	public String listAll(Model model) {
		List<User> listUsers = service.listAll();
		model.addAttribute("listUsers", listUsers);
		return "users";
	}
	
	@GetMapping("/users/new")
	public String newUser(Model model) {
		List<Role> listRoles = service.listRoles();
		User user = new User();
		user.setEnabled(true);
		model.addAttribute("user",user);
		model.addAttribute("listRoles",listRoles);
		model.addAttribute("pageTitle","Create New User");
		return "user_form";
	}
	
	@PostMapping("/users/save")
	public String saveUser(User user, @RequestParam("image") MultipartFile multipartFile, RedirectAttributes redirectAttributes) {
		System.out.println(user);
		System.out.println(multipartFile.getOriginalFilename());
		String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
		String uploadDir = "user-photos";
		FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
//		service.save(user);
		
//		redirectAttributes.addFlashAttribute("message", "The user has been saved successfully!");
		return "redirect:/users";
	}
	
	@GetMapping("/users/edit/{id}")
	public String editUser(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes redirectAttributes) {
		try {
			List<Role> listRoles = service.listRoles();
			User user = service.get(id);
			model.addAttribute("user",user);
			model.addAttribute("listRoles",listRoles);
			model.addAttribute("pageTitle","Edit User (ID: " + id +")");
			return "user_form";
		}catch(UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message", "Could not found any user with Id: " + id);
			return "redirect:/users";
		}
	}
	
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes redirectAttributes) {
		try {
			List<Role> listRoles = service.listRoles();
			service.delete(id);
			redirectAttributes.addFlashAttribute("message", "The user ID: " + id + " has been deleted successfully");
		}catch(UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message", "Could not found any user with Id: " + id);
		}
		return "redirect:/users";
	}
	
	@GetMapping("/users/{id}/enabled/{status}")
	public String updateUserEnableStatus(@PathVariable("id") Integer id, @PathVariable("status") boolean enable, RedirectAttributes redirectAttributes) {
		service.updateUserEnableStatus(id, enable);
		String status = enable ? "enabled" : "disabled";
		String message = "The user ID "+id+" has been " + status;
		redirectAttributes.addFlashAttribute("message", message);
		return "redirect:/users";
	}
}
